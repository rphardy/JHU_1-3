x
x[-2]
x[-c(1,2)]
z=matrix(seq(1,12),4,3)
z
z[,1,drop=FALSE]
dim(z)
ls()
rm(y)
ls()
x=runif(50)
y=rnorm(50)
plot(x,y)
plot(x,y,xlab="x",ylab="y",pch=".",col="blue")
plot(x,y,xlab="x",ylab="y",pch="12",col="blue")
plot(x,y,xlab="x",ylab="y",pch="^",col="blue")
plot(x,y,xlab="x",ylab="y",pch="*",col="blue")
plot(x,y,xlab="x",ylab="y",pch="dot",col="blue")
plot(x,y,xlab="Random Uniform",ylab="Random Normal",pch=".",col="blue")
plot(x,y,xlab="Random Uniform",ylab="Random Normal",pch=".",col="blue")
plot(x,y,xlab="Random Uniform",ylab="Random Normal",pch="*",col="blue")
par=mfrow(c(2,1))
par(mfrow(c(2,1))
.
par(mfrow(c(2,1))
)
par(mfrow(c(2,1)))
par(mfrow=(c(2,1)))
plot(x,y)
hist(y)
par(mfrow=(1,1))
par(mfrow=c(1,1))
plot(x,y,xlab="Random Uniform",ylab="Random Normal",pch=".",col="blue")
plot(x,y,xlab="Random Uniform",ylab="Random Normal",pch="*",col="blue")
?dim
help(summary)
?summary
?summary()
install.packages("devtools")
library(devtools)
install.packages("Rtools")
update
install.packes('installr')
install.packages('installr')
installr()
library("installr"")
installr()
require(installr)
installr()
installr()
installr()
require(installr)
require(installr)
installr()
install.packages("devtools")
library(devtools)
install.packages("Rtools", dependencies = FALSE)
install_github("genomicsclass/dagdata")
install_github("ririzarr/rafalib")
1:10
x <- 1:10
y <- 11:20
plot(x,y)
plot(x,y)
plot(x,y)
x <- 1:10
y <- rnorm(10)
plot(x,y)
plot(x,y)
y <- rnorm(10)
y <- rnorm(10)
plot(x,y)
plot(x,y)
plot(x,y)
y <- rnorm(10)
plot(x,y)
install.packages("snpStats", dependencies = FALSE)
updateR()
install.packages('installr')
library('installr')
installr()
installr()
library('installr')
installr()
source(http://bioconductor.org/biocLite.R)
(http:/bioconductor.org/biocLite.R)
bioconductor.org
("http://bioconductor.org/biocLite.R")
?source()
(“snpStats”)
source(bioconductor.org/biocLite.R)
biocLite.R
local({
vers <- getRversion()
biocVers <- tryCatch({
BiocInstaller::biocVersion() # recent BiocInstaller
}, error=function(...) {         # no / older BiocInstaller
BioC_version_associated_with_R_version <-
get(".BioC_version_associated_with_R_version",
envir=asNamespace("tools"), inherits=FALSE)
if (is.function(BioC_version_associated_with_R_version))
BioC_version_associated_with_R_version()
else                            # numeric_version
BioC_version_associated_with_R_version
})
if (vers < "3.0") {
## legacy; no need to change "3.0" ever
## coordinate this message with .onAttach
txt <- strwrap("A new version of Bioconductor is available
after installing the most recent version of R; see
http://bioconductor.org/install", exdent=2)
message(paste(txt, collapse="\n"))
} else if ("package:BiocInstaller" %in% search()) {
## messages even if already attached
tryCatch(BiocInstaller:::.onAttach(), error=function(...) NULL)
}
if (vers > "2.13" && biocVers > "2.8") {
if (exists("biocLite", .GlobalEnv, inherits=FALSE)) {
txt <- strwrap("There is an outdated biocLite() function in the
global environment; run 'rm(biocLite)' and try again.")
stop("\n", paste(txt, collapse="\n"))
}
if (!suppressWarnings(require("BiocInstaller", quietly=TRUE))) {
a <- NULL
p <- file.path(Sys.getenv("HOME"), ".R", "repositories")
if (file.exists(p)) {
a <- tools:::.read_repositories(p)
if (!"BioCsoft" %in% rownames(a))
a <- NULL
}
if (is.null(a)) {
p <- file.path(R.home("etc"), "repositories")
a <- tools:::.read_repositories(p)
}
if (!"package:utils" %in% search()) {
url <- "http://bioconductor.org/biocLite.R"
txt <- sprintf("use 'source(\"%s\")' to update 'BiocInstaller'
after 'utils' package is attached",
url)
message(paste(strwrap(txt), collapse="\n  "))
} else {
## add a conditional for Bioc releases occuring WITHIN
## a single R minor version. This is so that a user with a
## version of R (whose etc/repositories file references the
## no-longer-latest URL) and without BiocInstaller
## will be pointed to the most recent repository suitable
## for their version of R
if (vers == "3.2.0") {
a["BioCsoft", "URL"] <- sub(as.character(biocVers), "3.1",
a["BioCsoft", "URL"])
} else if (vers == "3.1.1") {
## R-3.1.1's etc/repositories file at the time of the release
## of Bioc 3.0 pointed to the 2.14 repository, but we want
## new installations to access the 3.0 repository
a["BioCsoft", "URL"] <- sub(as.character(biocVers), "3.0",
a["BioCsoft", "URL"])
} else if (vers == "3.1.0") {
## R-devel points to 2.14 repository
a["BioCsoft", "URL"] <- sub(as.character(biocVers), "2.14",
a["BioCsoft", "URL"])
} else if (vers >= "2.15" && vers < "2.16") {
a["BioCsoft", "URL"] <- sub(as.character(biocVers), "2.11",
a["BioCsoft", "URL"])
biocVers <- numeric_version("2.11")
}
install.packages("BiocInstaller", repos=a["BioCsoft", "URL"])
if (!suppressWarnings(require("BiocInstaller",
quietly=TRUE))) {
url0 <- "http://www.bioconductor.org/packages"
url <- sprintf("%s/%s/bioc",
url0, as.character(biocVers))
txt0 <- "'biocLite.R' failed to install 'BiocInstaller',
use 'install.packages(\"%s\", repos=\"%s\")'"
txt <- sprintf(txt0, "BiocInstaller", url)
message(paste(strwrap(txt), collapse="\n  "))
}
}
} else {
## BiocInstaller version 1.16.0-1.18.1 do not
## automatically update when type=="source"; notify users
## when they have updated R over their old libraries
installerVersion <- utils::packageVersion("BiocInstaller")
test0 <- (vers > "3.1.2") &&
!identical(getOption("pkgType"), "source") &&
(installerVersion >= "1.16.0") &&
(installerVersion <= "1.16.4")
if (test0) {
if (installerVersion < "1.16.4") {
txt <- "Update BiocInstaller with
oldPkgType=options(pkgType=\"source\");
biocLite(\"BiocInstaller\"); options(oldPkgType)"
message(paste(strwrap(txt, exdent=2), collapse="\n"))
}
if (vers >= "3.2") {
txt <- sprintf("BiocInstaller version %s is too old for
R version %s; remove.packages(\"BiocInstaller\"),
re-start R, then
source(\"http://bioconductor.org/biocLite.R\")",
biocVers, vers)
warning(paste(strwrap(txt, exdent=2), collapse="\n"))
}
}
}
} else {
source("http://bioconductor.org/getBioC.R")
biocLite <<-
function(pkgs, groupName="lite", ...)
{
if (missing(pkgs))
biocinstall(groupName=groupName, ...)
else
biocinstall(pkgs=pkgs, groupName=groupName, ...)
}
}
})
biocLite('snpStats')
require(snpStats)
require(hexbin)
data(for.exercise)
install.packages("hexbin", dependencies = FALSE)
require(hexbin)
data(for.exercise)
dim(snps.10)
class(snps.10)
snps.10
(snp.support)
?summary()
?"summary"
summary(snp.support)
(snp.support)
summary(snp.support)
View(snp.support)
View(subject.support)
save.image("C:/Work/BCA/BIF/Module 2/snpStats.RData")
load("C:/Work/BCA/BIF/Assignment 1/Assignment1.RData")
??delete
GK <- function(initdist,alpha,gamma,delta,n,stepsize)
{
A=matrix(c(0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0),4,4)
B=matrix(c(0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0),4,4)
G=matrix(c(0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0),4,4)
D=matrix(c(0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0),4,4)
D1=matrix(c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),4,4)
D2=matrix(c(0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),4,4)
D3=matrix(c(0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),4,4)
D4=matrix(c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1),4,4)
S <- alpha*A+beta*B+gamma*G+delta*D+(1-alpha-2*gamma)*D1+(1-beta-2*gamma)*D2+(1-alpha-2*delta)*D3+(1-beta-2*delta)*D4
T=diag(4)
for (i in seq(1,n,stepsize))
{
if (i==1)
T=T%*%S
else
for (j in seq(1:stepsize))
T=T%*%S
cat(i,":", initdist %*% T,"\n")
}
}
GK <- function(initdist,alpha,beta,gamma,delta,n,stepsize)
{
A=matrix(c(0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0),4,4)
B=matrix(c(0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0),4,4)
G=matrix(c(0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0),4,4)
D=matrix(c(0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0),4,4)
D1=matrix(c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),4,4)
D2=matrix(c(0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),4,4)
D3=matrix(c(0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),4,4)
D4=matrix(c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1),4,4)
S <- alpha*A+beta*B+gamma*G+delta*D+(1-alpha-2*gamma)*D1+(1-beta-2*gamma)*D2+(1-alpha-2*delta)*D3+(1-beta-2*delta)*D4
T=diag(4)
for (i in seq(1,n,stepsize))
{
if (i==1)
T=T%*%S
else
for (j in seq(1:stepsize))
T=T%*%S
cat(i,":", initdist %*% T,"\n")
}
}
GK(c(1,0,0,0),0.15,0.15,0.0.25,0.25,10,1)
GK(c(1,0,0,0),0.15,0.15,0.25,0.25,10,1)
GKE <- function(initdist,alpha,beta,gamma,delta,n,stepsize)
{
A=matrix(c(0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0),4,4)
B=matrix(c(0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0),4,4)
G=matrix(c(0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0),4,4)
D=matrix(c(0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0),4,4)
D1=matrix(c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),4,4)
D2=matrix(c(0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),4,4)
D3=matrix(c(0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),4,4)
D4=matrix(c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1),4,4)
S <- alpha*A+beta*B+gamma*G+delta*D+(1-alpha-2*gamma)*D1+(1-beta-2*gamma)*D2+(1-alpha-2*delta)*D3+(1-beta-2*delta)*D4
T=diag(4)
for (i in seq(1,n,stepsize))
{
if (i==1)
T=T%*%S
else
for (j in seq(1:stepsize))
T=T%*%S
cat(i,":", initdist %*% T,"\n")
}
}
GKE(c(1,0,0,0),0.15,0.15,0.25,0.25,10,1)
GKE(c(0,1,0,0),0.3,0.3,0.3,0.3,10,1)
GKE(c(0,1,0,0),0.4,0.3,0.2,0.3,10,1)
GKE(c(0,1,0,0),0.1,0.2,0.2,0.3,10,1)
GKE(c(0,1,0,0),0.5,0.3,0.2,0.3,10,1)
GKE(c(0,1,0,0),0.15,0.45,0.2,0.3,10,1)
GKE(c(1,0,0,0),0.15,0.45,0.2,0.3,10,1)
GKE(c(1,0,0,0),0.15,0.15,0.2,0.3,10,1)
GKE(c(1,0,0,0),0.5,0.5,0.2,0.3,10,1)
GKE(c(1,0,0,0),0.1,0.9,0.2,0.3,10,1)
GKE(c(1,0,0,0),0.1,0.9,0.2,0.3,50,1)
GKE(c(1,0,0,0),0.1,0.9,0.2,0.3,20,1)
GKE(c(1,0,0,0),0.1,0.9,0.3,0.3,20,1)
GKE(c(1,0,0,0),0.1,0.9,0.3,0.1,20,1)
GKE(c(1,0,0,0),0.1,0.9,0.6,0.3,20,1)
GKE(c(1,0,0,0),0.1,0.9,0.15,0.2,20,1)
GKE(c(1,0,0,0),0.15,0.35,0.2,0.3,10,1)
install.packages("hmm.discnp", dependencies = FALSE)
library(hmm.discnp)
tpm <- matrix(c(0.4,0.9,0.6,0.1),2,2)
View(tpm)
ispd <- c(0.3,0.7)
yval <- c(1,2,3)
Rho <- matrix(c(0.5,0.5,0,0,0.5,0.5),2,3)
View(Rho)
del(Rho)
Rho <- matrix(c(0.5,0.5,0,0,0.5,0.5),3,2)
View(Rho)
View(tpm)
y <- sim.hmm(rep(4,10),tpm,Rho,ispd=ispd,yval=yval)
y
set.seed(111)
y <- sim.hmm(rep(4,10),tpm,Rho,ispd=ispd,yval=yval)
y
y
y <- sim.hmm(rep(4,10),tpm,Rho,ispd,yval)
y
set.seed(111)
y <- sim.hmm(rep(4,10),tpm,Rho,ispd,yval)
y
$Rho
Rho
tpm
ispd
yval
set.seed(111)
y <- sim.hmm(rep(4,10),tpm=tpm,Rho=Rho,ispd=ispd,yval=yval)
y
iv <- c(1,2,3,1)
viterbi(y=iv,tpm=tpm,Rho=Rho,ispd=ispd,log=FALSE)
y <- c(1,2,3)
viterbi(y,tpm=tpm,Rho=Rho,ispd=ispd,log=FALSE)
set.seed(111)
y <- sim.hmm(rep(4,10),tpm=tpm,Rho=Rho,ispd=ispd,yval=yval)
y
viterbi(y,tpm=tpm,Rho=Rho,ispd=ispd,log=FALSE)
viterbi(y=iv,tpm=tpm,Rho=Rho,ispd=ispd,log=FALSE)
View(Rho)
viterbi(y=iv,tpm=tpm,Rho=Rho,ispd=ispd)
View(Rho)
View(tpm)
viterbi(y=iv,object=NULL,tpm=tpm,Rho=Rho,ispd=ispd)
viterbi(y=iv,object=NULL,tpm,Rho,ispd)
ispd <- c(0.7,0.3)
viterbi(y=iv,object=NULL,tpm,Rho,ispd)
ispd <- c(0.3,0.7)
View(Rho)
tpm <- matrix(c(0.4,0.6,0.9,0.1),2,2)
viterbi(y=iv,object=NULL,tpm,Rho,ispd)
View(tpm)
tpm <- matrix(c(0.4,0.9,0.6,0.1),2,2)
viterbi(y=iv,object=NULL,tpm,Rho,ispd)
vii <- c(1,2,3,1,2,3,1,2,3)
viterbi(y=vii,tpm,Rho,ispd)
viterbi(y=vii,tpm=tpm,Rho=Rho,ispd=ispd)
viterbi(y=iv,tpm=tpm,Rho=Rho,ispd=ispd)
y
install.packages(devtools)
install.packages("car")
package("car")
library("car")
library()
?data.frame
Numbers <- c(1:10)
Numbers
remove(Numbers)
install.packages(car)
"car"
install.packages("car")
library()
numbers <- c(1:10)
words <- ("One","Two","Three","Four", "Five","Six","Seven","Eight", "Nine", "Ten")
words <- c("One","Two","Three","Four", "Five","Six","Seven","Eight", "Nine", "Ten")
words
numbers
nw <- matrix(numbers,words)
?matrix
?combine
nw <- c(numbers,words)
nw
drop nw
remove nw
remove(nw)
nw <- dataframe(numers, words)
?data.frame
nw <- data.frame(numbers,words)
nw
dim(NW)
dim(nw)
is.data.frame(nw)
print.data.frame(nw)
attributes(nw)
attributes(nw)
read.table(nw)
nw''
nw
nw[8,1]
nw[8,2]
a <- matrix(1:10, nrow=2, ncol =5)
a
X <- c(1:6)
Y <- c(5:10)
Matxy <- rbind(
)
X
Y
remove(Matxy)
Matxy <- rbind(X,Y)
Matxy
Matxyc <-cbind(X,Y)
Matxyc
remove
remove(X,Y)
remove(numbers, words)
remove(Matxy,Matxyc)
list()
library()
objects()
list a
list(a)
remove(a)
list(a)
list(objects)
library(car)
install.packages("car")
library(car)
is.data.frame(Nw)
()
library()
?data.frame
words <- c("One":"Ten")
numbers <- c(1:10)
words <- c("One","Two","Three","Four","Five","Six", "Seven", "Eight", "Nine", "Ten")
nw <- data.frame(numbers, words)
attributes(nw)
nw
nw[8,2]
a <- matrix(1:10, nrow=2, ncol=5)
x <- c(1:6)
y <- c(5:10)
matxy <- rbind(x,y)
matxy
matxyc <- cbind(x,y)
matxyc
m2 <- c(1:10)
matrix2 - dim(m2,2,5)
matrix2 <- dim(m2,2,5)
dim(m2) <- c(2,5)
m2
getwd()
x <- c("e", "e", "e", "w")
y <- factor(x)
x
y
label(y) <- c("east","west")
name(y) <- c("east","west")
values(y) <- c("east","west")
levels(y) <- c("east", "west")
y
?rnorm
args("rnorm")
rnorm
update()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
install.packages("KernSmooth")
library(KernSmooth)
clear
getwd()
setwd("C:/Users/Richard")
getwd()
setwd("C:/Users/Richard/dsprojects")
getwd()
dir()
setwd("C:/Users/Richard/dsprojects/RProgrammingCourse")
getwd()
myfunction <- function() {
x <- rnorm(100)
mean(x)
}
myfunction()
myfunction()
myfunction()
myfunction()
myfunction()
myfunction()
getwd()
